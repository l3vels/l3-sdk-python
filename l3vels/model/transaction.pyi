# coding: utf-8

"""
    L3vels Api

    L3vels API for Game developers  # noqa: E501

    The version of the OpenAPI document: 0.3
    Contact: support@l3vels.xyz
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from l3vels import schemas  # noqa: F401


class Transaction(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "modified_on",
            "chain_id",
            "method",
            "contract_id",
            "block_number",
            "contract_address",
            "type",
            "created_by",
            "collection_id",
            "environment",
            "account_id",
            "blockchain",
            "created_on",
            "modified_by",
            "from",
            "id",
            "to",
            "chain_name",
            "events",
            "transaction_hash",
            "game_id",
            "status",
        }
        
        class properties:
            id = schemas.StrSchema
            status = schemas.StrSchema
            _from = schemas.StrSchema
            to = schemas.StrSchema
            contract_id = schemas.StrSchema
            contract_address = schemas.StrSchema
            blockchain = schemas.StrSchema
            chain_name = schemas.StrSchema
            chain_id = schemas.NumberSchema
            environment = schemas.StrSchema
            transaction_hash = schemas.StrSchema
            block_number = schemas.NumberSchema
            type = schemas.StrSchema
            method = schemas.StrSchema
            
            
            class events(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'events':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            game_id = schemas.StrSchema
            collection_id = schemas.StrSchema
            account_id = schemas.StrSchema
            created_on = schemas.DateTimeSchema
            modified_on = schemas.DateTimeSchema
            created_by = schemas.StrSchema
            modified_by = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "status": status,
                "from": _from,
                "to": to,
                "contract_id": contract_id,
                "contract_address": contract_address,
                "blockchain": blockchain,
                "chain_name": chain_name,
                "chain_id": chain_id,
                "environment": environment,
                "transaction_hash": transaction_hash,
                "block_number": block_number,
                "type": type,
                "method": method,
                "events": events,
                "game_id": game_id,
                "collection_id": collection_id,
                "account_id": account_id,
                "created_on": created_on,
                "modified_on": modified_on,
                "created_by": created_by,
                "modified_by": modified_by,
            }
    
    modified_on: MetaOapg.properties.modified_on
    chain_id: MetaOapg.properties.chain_id
    method: MetaOapg.properties.method
    contract_id: MetaOapg.properties.contract_id
    block_number: MetaOapg.properties.block_number
    contract_address: MetaOapg.properties.contract_address
    type: MetaOapg.properties.type
    created_by: MetaOapg.properties.created_by
    collection_id: MetaOapg.properties.collection_id
    environment: MetaOapg.properties.environment
    account_id: MetaOapg.properties.account_id
    blockchain: MetaOapg.properties.blockchain
    created_on: MetaOapg.properties.created_on
    modified_by: MetaOapg.properties.modified_by
    id: MetaOapg.properties.id
    to: MetaOapg.properties.to
    chain_name: MetaOapg.properties.chain_name
    events: MetaOapg.properties.events
    transaction_hash: MetaOapg.properties.transaction_hash
    game_id: MetaOapg.properties.game_id
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["from"]) -> MetaOapg.properties._from: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["to"]) -> MetaOapg.properties.to: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contract_id"]) -> MetaOapg.properties.contract_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contract_address"]) -> MetaOapg.properties.contract_address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["blockchain"]) -> MetaOapg.properties.blockchain: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["chain_name"]) -> MetaOapg.properties.chain_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["chain_id"]) -> MetaOapg.properties.chain_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["environment"]) -> MetaOapg.properties.environment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transaction_hash"]) -> MetaOapg.properties.transaction_hash: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["block_number"]) -> MetaOapg.properties.block_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["method"]) -> MetaOapg.properties.method: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["events"]) -> MetaOapg.properties.events: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["game_id"]) -> MetaOapg.properties.game_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["collection_id"]) -> MetaOapg.properties.collection_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_on"]) -> MetaOapg.properties.created_on: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modified_on"]) -> MetaOapg.properties.modified_on: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_by"]) -> MetaOapg.properties.created_by: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modified_by"]) -> MetaOapg.properties.modified_by: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "status", "from", "to", "contract_id", "contract_address", "blockchain", "chain_name", "chain_id", "environment", "transaction_hash", "block_number", "type", "method", "events", "game_id", "collection_id", "account_id", "created_on", "modified_on", "created_by", "modified_by", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["from"]) -> MetaOapg.properties._from: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["to"]) -> MetaOapg.properties.to: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contract_id"]) -> MetaOapg.properties.contract_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contract_address"]) -> MetaOapg.properties.contract_address: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["blockchain"]) -> MetaOapg.properties.blockchain: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["chain_name"]) -> MetaOapg.properties.chain_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["chain_id"]) -> MetaOapg.properties.chain_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["environment"]) -> MetaOapg.properties.environment: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transaction_hash"]) -> MetaOapg.properties.transaction_hash: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["block_number"]) -> MetaOapg.properties.block_number: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["method"]) -> MetaOapg.properties.method: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["events"]) -> MetaOapg.properties.events: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["game_id"]) -> MetaOapg.properties.game_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["collection_id"]) -> MetaOapg.properties.collection_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_on"]) -> MetaOapg.properties.created_on: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modified_on"]) -> MetaOapg.properties.modified_on: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_by"]) -> MetaOapg.properties.created_by: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modified_by"]) -> MetaOapg.properties.modified_by: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "status", "from", "to", "contract_id", "contract_address", "blockchain", "chain_name", "chain_id", "environment", "transaction_hash", "block_number", "type", "method", "events", "game_id", "collection_id", "account_id", "created_on", "modified_on", "created_by", "modified_by", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        modified_on: typing.Union[MetaOapg.properties.modified_on, str, datetime, ],
        chain_id: typing.Union[MetaOapg.properties.chain_id, decimal.Decimal, int, float, ],
        method: typing.Union[MetaOapg.properties.method, str, ],
        contract_id: typing.Union[MetaOapg.properties.contract_id, str, ],
        block_number: typing.Union[MetaOapg.properties.block_number, decimal.Decimal, int, float, ],
        contract_address: typing.Union[MetaOapg.properties.contract_address, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        created_by: typing.Union[MetaOapg.properties.created_by, str, ],
        collection_id: typing.Union[MetaOapg.properties.collection_id, str, ],
        environment: typing.Union[MetaOapg.properties.environment, str, ],
        account_id: typing.Union[MetaOapg.properties.account_id, str, ],
        blockchain: typing.Union[MetaOapg.properties.blockchain, str, ],
        created_on: typing.Union[MetaOapg.properties.created_on, str, datetime, ],
        modified_by: typing.Union[MetaOapg.properties.modified_by, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        to: typing.Union[MetaOapg.properties.to, str, ],
        chain_name: typing.Union[MetaOapg.properties.chain_name, str, ],
        events: typing.Union[MetaOapg.properties.events, list, tuple, ],
        transaction_hash: typing.Union[MetaOapg.properties.transaction_hash, str, ],
        game_id: typing.Union[MetaOapg.properties.game_id, str, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Transaction':
        return super().__new__(
            cls,
            *_args,
            modified_on=modified_on,
            chain_id=chain_id,
            method=method,
            contract_id=contract_id,
            block_number=block_number,
            contract_address=contract_address,
            type=type,
            created_by=created_by,
            collection_id=collection_id,
            environment=environment,
            account_id=account_id,
            blockchain=blockchain,
            created_on=created_on,
            modified_by=modified_by,
            id=id,
            to=to,
            chain_name=chain_name,
            events=events,
            transaction_hash=transaction_hash,
            game_id=game_id,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )

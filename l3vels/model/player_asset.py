# coding: utf-8

"""
    L3vels Api

    L3vels API for Game developers  # noqa: E501

    The version of the OpenAPI document: 0.3
    Contact: support@l3vels.xyz
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from l3vels import schemas  # noqa: F401


class PlayerAsset(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "collection_id",
            "modified_on",
            "amount",
            "account_id",
            "player_id",
            "created_on",
            "project_id",
            "modified_by",
            "asset_id",
            "id",
            "created_by",
        }
        
        class properties:
            id = schemas.StrSchema
            amount = schemas.NumberSchema
            player_id = schemas.StrSchema
            asset_id = schemas.StrSchema
            collection_id = schemas.StrSchema
            account_id = schemas.NumberSchema
            project_id = schemas.StrSchema
            created_on = schemas.DateTimeSchema
            modified_on = schemas.DateTimeSchema
            created_by = schemas.NumberSchema
            modified_by = schemas.NumberSchema
            __annotations__ = {
                "id": id,
                "amount": amount,
                "player_id": player_id,
                "asset_id": asset_id,
                "collection_id": collection_id,
                "account_id": account_id,
                "project_id": project_id,
                "created_on": created_on,
                "modified_on": modified_on,
                "created_by": created_by,
                "modified_by": modified_by,
            }
    
    collection_id: MetaOapg.properties.collection_id
    modified_on: MetaOapg.properties.modified_on
    amount: MetaOapg.properties.amount
    account_id: MetaOapg.properties.account_id
    player_id: MetaOapg.properties.player_id
    created_on: MetaOapg.properties.created_on
    project_id: MetaOapg.properties.project_id
    modified_by: MetaOapg.properties.modified_by
    asset_id: MetaOapg.properties.asset_id
    id: MetaOapg.properties.id
    created_by: MetaOapg.properties.created_by
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["player_id"]) -> MetaOapg.properties.player_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["asset_id"]) -> MetaOapg.properties.asset_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["collection_id"]) -> MetaOapg.properties.collection_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["project_id"]) -> MetaOapg.properties.project_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_on"]) -> MetaOapg.properties.created_on: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modified_on"]) -> MetaOapg.properties.modified_on: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_by"]) -> MetaOapg.properties.created_by: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modified_by"]) -> MetaOapg.properties.modified_by: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "amount", "player_id", "asset_id", "collection_id", "account_id", "project_id", "created_on", "modified_on", "created_by", "modified_by", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["player_id"]) -> MetaOapg.properties.player_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["asset_id"]) -> MetaOapg.properties.asset_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["collection_id"]) -> MetaOapg.properties.collection_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["project_id"]) -> MetaOapg.properties.project_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_on"]) -> MetaOapg.properties.created_on: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modified_on"]) -> MetaOapg.properties.modified_on: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_by"]) -> MetaOapg.properties.created_by: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modified_by"]) -> MetaOapg.properties.modified_by: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "amount", "player_id", "asset_id", "collection_id", "account_id", "project_id", "created_on", "modified_on", "created_by", "modified_by", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        collection_id: typing.Union[MetaOapg.properties.collection_id, str, ],
        modified_on: typing.Union[MetaOapg.properties.modified_on, str, datetime, ],
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, float, ],
        account_id: typing.Union[MetaOapg.properties.account_id, decimal.Decimal, int, float, ],
        player_id: typing.Union[MetaOapg.properties.player_id, str, ],
        created_on: typing.Union[MetaOapg.properties.created_on, str, datetime, ],
        project_id: typing.Union[MetaOapg.properties.project_id, str, ],
        modified_by: typing.Union[MetaOapg.properties.modified_by, decimal.Decimal, int, float, ],
        asset_id: typing.Union[MetaOapg.properties.asset_id, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        created_by: typing.Union[MetaOapg.properties.created_by, decimal.Decimal, int, float, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PlayerAsset':
        return super().__new__(
            cls,
            *_args,
            collection_id=collection_id,
            modified_on=modified_on,
            amount=amount,
            account_id=account_id,
            player_id=player_id,
            created_on=created_on,
            project_id=project_id,
            modified_by=modified_by,
            asset_id=asset_id,
            id=id,
            created_by=created_by,
            _configuration=_configuration,
            **kwargs,
        )
